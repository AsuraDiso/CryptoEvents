// src/controllers/exportController.js
const soapClientService = require('../services/soapClientService');
const XMLExportService = require('../services/xmlExportService');

class ExportController {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async getExports(req, res) {
        try {
            const files = await XMLExportService.getExportedFiles();
            res.json({
                success: true,
                exports: files,
                total: files.length
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–Ω–µ—Ç–µ
     */
    async exportCoinAnalysis(req, res) {
        try {
            const { symbol, startDate, endDate, limit = 10 } = req.body;

            if (!symbol) {
                return res.status(400).json({
                    success: false,
                    error: 'Symbol parameter is required'
                });
            }

            console.log(`üöÄ Starting complete analysis export for ${symbol}...`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SOAP –∫–ª–∏–µ–Ω—Ç
            const completeData = await soapClientService.getCompleteAnalysis(
                symbol,
                startDate,
                endDate,
                limit
            );

            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ XML
            const exportResult = await XMLExportService.exportCoinAnalysis(
                symbol,
                completeData,
                { startDate, endDate, limit }
            );

            console.log(`‚úÖ Complete analysis exported for ${symbol}: ${exportResult.filename}`);

            res.json({
                success: true,
                message: `Complete analysis exported for ${symbol}`,
                export: exportResult,
                summary: {
                    coinSymbol: symbol,
                    totalEvents: completeData.events.eventCurrencies.eventCurrency.length,
                    topEventsCount: completeData.topImpactEvents.topEvents.topEvent.length,
                    dataPoints: completeData.correlationSummary.correlationSummary.dataPoints,
                    analysisDate: {
                        from: startDate || 'earliest',
                        to: endDate || 'latest'
                    }
                }
            });
        } catch (error) {
            console.error(`‚ùå Export failed for ${req.body.symbol}:`, error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ XML —Ñ–∞–π–ª–∞
     */
    async downloadXML(req, res) {
        try {
            const { filename } = req.params;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if (!filename || !filename.endsWith('.xml')) {
                return res.status(400).json({
                    success: false,
                    error: 'Invalid filename. Only XML files are allowed.'
                });
            }

            const path = require('path');
            const fs = require('fs').promises;
            const filePath = path.join(XMLExportService.exportDir, filename);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            try {
                await fs.access(filePath);
            } catch (error) {
                return res.status(404).json({
                    success: false,
                    error: 'XML file not found'
                });
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            res.setHeader('Content-Type', 'application/xml');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            //   res.sendFile(filePath);
            res.sendFile(filePath, async (err) => {
                if (err) {
                    console.error(`‚ùå Error sending file ${filename}:`, err);
                    // –§–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –Ω–µ —É–¥–∞–ª—è–µ–º
                    return;
                }

                try {
                    // –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    await fs.unlink(filePath);
                    console.log(`üóëÔ∏è File automatically deleted after download: ${filename}`);
                } catch (deleteError) {
                    console.error(`‚ùå Error deleting file ${filename}:`, deleteError);
                    // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ñ–∞–π–ª –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                }
            });

        } catch (error) {
            console.error('Download XML error:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    async getStatus(req, res) {
        try {
            const soapStatus = soapClientService.getConnectionStatus();
            const files = await XMLExportService.getExportedFiles();

            res.json({
                success: true,
                status: {
                    soapClient: soapStatus,
                    xmlExportService: {
                        exportDirectory: XMLExportService.exportDir,
                        totalExports: files.length,
                        isReady: true
                    },
                    lastExports: files.slice(0, 5) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
                }
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async cleanup(req, res) {
        try {
            const { days = 30 } = req.query;
            const result = await XMLExportService.cleanupOldFiles(parseInt(days));

            res.json({
                success: true,
                cleanup: result,
                message: `Cleanup completed. Deleted ${result.deleted} files older than ${days} days.`
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
}

module.exports = ExportController;